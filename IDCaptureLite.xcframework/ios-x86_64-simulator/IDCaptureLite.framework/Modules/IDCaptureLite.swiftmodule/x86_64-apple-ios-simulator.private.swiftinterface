// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IDCaptureLite
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AudioToolbox
import CoreGraphics
import Foundation
import IDentityLiteSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct ValidateIdResult {
  public var front: IDentityLiteSDK.DetectedData
  public var back: IDentityLiteSDK.DetectedData?
  public func submit(additionalDocuments: [IDentityLiteSDK.AdditionalDocumentsRequest]? = nil, completion: @escaping IDentityLiteSDK.ValidateIdAPICompletion)
}
public typealias ValidateIdCompletion = (_ result: Swift.Result<IDCaptureLite.ValidateIdResult, Swift.Error>) -> Swift.Void
extension IDentityLiteSDK.IDentitySDK {
  public static var customerValidateIdRequest: IDentityLiteSDK.CustomerValidateIdRequest?
  public class func idValidation(from presenter: UIKit.UIViewController, options: IDentityLiteSDK.AdditionalCustomerWFlagCommonData, captureBack: Swift.Bool = true, completion: @escaping IDCaptureLite.ValidateIdCompletion)
  public class func idValidation(from presenter: UIKit.UIViewController, options: IDentityLiteSDK.AdditionalCustomerWFlagCommonData, idType: Swift.String, idCountry: Swift.String, idState: Swift.String?, completion: @escaping IDCaptureLite.ValidateIdCompletion)
}
extension IDentityLiteSDK.State : Swift.Equatable {
  public static func == (lhs: IDentityLiteSDK.State, rhs: IDentityLiteSDK.State) -> Swift.Bool
}
extension IDentityLiteSDK.Country : Swift.Equatable {
  public static func == (lhs: IDentityLiteSDK.Country, rhs: IDentityLiteSDK.Country) -> Swift.Bool
}
